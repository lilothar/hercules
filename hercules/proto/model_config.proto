syntax = "proto2";

package hercules.proto;

import "hercules/proto/data_type.proto";

message ModelRateLimiter {

    message Resource {

        optional string name = 1;
        optional bool global = 2;
        optional uint32 count = 3;
    }

    repeated Resource resources = 1;
    optional uint32 priority = 2;
}

message ModelInstanceGroup {

    enum Kind {
        KIND_AUTO = 0;
        KIND_GPU = 1;
        KIND_CPU = 2;
        KIND_MODEL = 3;
    }

    message SecondaryDevice {
        enum SecondaryDeviceKind {
            KIND_NVDLA = 0;
        }
        optional SecondaryDeviceKind kind = 1;
        optional int64 device_id = 2;
    }

    optional string name = 1;
    optional Kind kind = 4;
    optional int32 count = 2;
    optional ModelRateLimiter rate_limiter = 6;
    repeated int32 gpus = 3;
    repeated SecondaryDevice secondary_devices = 8;
    repeated string profile = 5;
    optional bool passive = 7;
    optional string host_policy = 9;
}

message ModelTensorReshape {
    repeated int64 shape = 1;
}

message ModelInput {
    enum Format {
        FORMAT_NONE = 0;
        FORMAT_NHWC = 1;
        FORMAT_NCHW = 2;
    }
    optional string name = 1;
    optional DataType data_type = 2;
    optional Format format = 3;
    repeated int64 dims = 4;
    optional ModelTensorReshape reshape = 5;
    optional bool is_shape_tensor = 6;
    optional bool allow_ragged_batch = 7;
    optional bool optional = 8;
}

message ModelOutput {
    optional string name = 1;
    optional DataType data_type = 2;
    repeated int64 dims = 3;
    optional ModelTensorReshape reshape = 5;
    optional string label_filename = 4;
    optional bool is_shape_tensor = 6;
}

message BatchInput {
    enum Kind {
        BATCH_ELEMENT_COUNT = 0;
        BATCH_ACCUMULATED_ELEMENT_COUNT = 1;
        BATCH_ACCUMULATED_ELEMENT_COUNT_WITH_ZERO = 2;
        BATCH_MAX_ELEMENT_COUNT_AS_SHAPE = 3;
        BATCH_ITEM_SHAPE = 4;
        BATCH_ITEM_SHAPE_FLATTEN = 5;
    }
    optional Kind kind = 1;
    repeated string target_name = 2;
    optional DataType data_type = 3;
    repeated string source_input = 4;
}

message BatchOutput {
    enum Kind {
        BATCH_SCATTER_WITH_INPUT_SHAPE = 0;
    }

    repeated string target_name = 1;
    optional Kind kind = 2;
    repeated string source_input = 3;
}

message ModelVersionPolicy {
    message Latest {
        optional uint32 num_versions = 1;
    }

    message All {
    }

    message Specific {
        repeated int64 versions = 1;
    }

    oneof policy_choice {
        Latest latest = 1;
        All all = 2;
        Specific specific = 3;
    }
}

message ModelOptimizationPolicy {
    message Graph {
        optional int32 level = 1;
    }

    enum ModelPriority {
        PRIORITY_DEFAULT = 0;

        PRIORITY_MAX = 1;
        PRIORITY_MIN = 2;
    }

    message Cuda {
        message GraphSpec {
            message Shape {
                repeated int64 dim = 1;
            }

            message LowerBound {
                optional int32 batch_size = 1;

                map<string, Shape> input = 2;
            }

            optional int32 batch_size = 1;

            map<string, Shape> input = 2;

            optional LowerBound graph_lower_bound = 3;
        }

        optional bool graphs = 1;

        optional bool busy_wait_events = 2;

        repeated GraphSpec graph_spec = 3;

        optional bool output_copy_stream = 4;
    }

    message ExecutionAccelerators {

        message Accelerator {

            optional string name = 1;

            map<string, string> parameters = 2;
        }

        repeated Accelerator gpu_execution_accelerator = 1;

        repeated Accelerator cpu_execution_accelerator = 2;
    }

    message PinnedMemoryBuffer {
        optional bool enable = 1;
    }

    optional Graph graph = 1;

    optional ModelPriority priority = 2;

    optional Cuda cuda = 3;

    optional ExecutionAccelerators execution_accelerators = 4;

    optional PinnedMemoryBuffer input_pinned_memory = 5;

    optional PinnedMemoryBuffer output_pinned_memory = 6;

    optional uint32 gather_kernel_buffer_threshold = 7;

    optional bool eager_batching = 8;
}

message ModelQueuePolicy {

    enum TimeoutAction {
        REJECT = 0;

        DELAY = 1;
    }

    optional TimeoutAction timeout_action = 1;

    optional uint64 default_timeout_microseconds = 2;

    optional bool allow_timeout_override = 3;

    optional uint32 max_queue_size = 4;
}

message ModelDynamicBatching {

    repeated int32 preferred_batch_size = 1;

    optional uint64 max_queue_delay_microseconds = 2;

    optional bool preserve_ordering = 3;

    optional uint32 priority_levels = 4;

    optional uint32 default_priority_level = 5;

    optional ModelQueuePolicy default_queue_policy = 6;

    map<uint32, ModelQueuePolicy> priority_queue_policy = 7;
}

message ModelSequenceBatching {

    message Control {
        enum Kind {
            CONTROL_SEQUENCE_START = 0;

            CONTROL_SEQUENCE_READY = 1;
            CONTROL_SEQUENCE_END = 2;
            CONTROL_SEQUENCE_CORRID = 3;
        }

        optional Kind kind = 1;

        repeated int32 int32_false_true = 2;

        repeated float fp32_false_true = 3;

        repeated bool bool_false_true = 5;

        optional DataType data_type = 4;
    }

    message ControlInput {
        optional string name = 1;
        repeated Control control = 2;
    }

    message InitialState {
        optional DataType data_type = 1;

        repeated int64 dims = 2;
        oneof state_data {
            bool zero_data = 3;

            string data_file = 4;
        }
        optional string name = 5;
    }

    message State {
        optional string input_name = 1;
        optional string output_name = 2;
        optional DataType data_type = 3;
        repeated int64 dims = 4;
        repeated InitialState initial_state = 5;
    }

    message StrategyDirect {
        optional uint64 max_queue_delay_microseconds = 1;
        optional float minimum_slot_utilization = 2;
    }

    message StrategyOldest {
        optional int32 max_candidate_sequences = 1;
        repeated int32 preferred_batch_size = 2;
        optional uint64 max_queue_delay_microseconds = 3;
    }

    oneof strategy_choice {
        StrategyDirect direct = 3;
        StrategyOldest oldest = 4;
    }
    optional uint64 max_sequence_idle_microseconds = 1;
    repeated ControlInput control_input = 2;
    repeated State state = 5;
}

message ModelEnsembling {
    message Step {

        optional string model_name = 1;
        optional int64 model_version = 2;
        map<string, string> input_map = 3;
        map<string, string> output_map = 4;
    }

    repeated Step step = 1;
}

message ModelParameter {

    optional string string_value = 1;
}

message ModelWarmup {

    message Input {

        optional DataType data_type = 1;
        repeated int64 dims = 2;
        oneof input_data_type {
            bool zero_data = 3;
            bool random_data = 4;
            string input_data_file = 5;
        }
    }

    optional string name = 1;
    optional uint32 batch_size = 2;
    map<string, Input> inputs = 3;
    optional uint32 count = 4;
}

message ModelOperations {
    repeated string op_library_filename = 1;
}

message ModelTransactionPolicy {
    optional bool decoupled = 1;
}

message ModelRepositoryAgents {

    message Agent {
        optional string name = 1;
        map<string, string> parameters = 2;
    }

    repeated Agent agents = 1;
}

message ModelResponseCache {

    optional bool enable = 1;
}

message ModelConfig {

    optional string name = 1;

    optional string platform = 2;

    optional string backend = 17;

    optional ModelVersionPolicy version_policy = 3;

    optional int32 max_batch_size = 4;

    repeated ModelInput input = 5;

    repeated ModelOutput output = 6;
    repeated BatchInput batch_input = 20;
    repeated BatchOutput batch_output = 21;
    optional ModelOptimizationPolicy optimization = 12;

    oneof scheduling_choice {
        ModelDynamicBatching dynamic_batching = 11;
        ModelSequenceBatching sequence_batching = 13;
        ModelEnsembling ensemble_scheduling = 15;
    }

    repeated ModelInstanceGroup instance_group = 7;
    optional string default_model_filename = 8;
    map<string, string> cc_model_filenames = 9;
    map<string, string> metric_tags = 10;
    map<string, ModelParameter> parameters = 14;
    repeated ModelWarmup model_warmup = 16;
    optional ModelOperations model_operations = 18;
    optional ModelTransactionPolicy model_transaction_policy = 19;
    optional ModelRepositoryAgents model_repository_agents = 23;
    optional ModelResponseCache response_cache = 24;
}
